## Component Diagram

![Component Diagram](https://www.plantuml.com/plantuml/png/VLLDZzis4BthLmnyQTPTPz53BujW4Na_4YysZclP3Ofs3pGrbWbJf4fIsowA_FVCY9IY3TRrmHZEUngz-U3elG_2XRRMcJygqmWdQf2sRgn14uhmh14SoY1CfV4r2loN0VtcGXuhPrjJNbjjtRjtrreHUdK53wewXBbkyNLUWUu9NS_xu13DwyGR4KHF-mErjl-yphlzDw0pGlVSbJB7x6kM1HKeb-j1zuqI5MLo2HzjG0rhzAH416KD5Cy-OFsNUHEJc4MDa3jvK86AqJeyop8XWtNmeKKVabq4iTydEozhPPGFJj0fongIAIg4IGm9XIfn0gConJB--GLtUTF0Tl4u1eKd3oSnX4cIE0oyuHgWASyuu53F571kBJMjOhUI-3XcKDHv4LbRIlu4PPieUHiE9oXvJ-6SJt4OYxGrIcouq2Ue0nxfInlKNadnFqyi2ovEIHEo4vwgSvCiQk7A-b0vB7vxwCgJfeYUkPbdcTIsBM7IZmoay9wPepbAfRojXOeST1Iv-BHPdJrog0vW1J_1ojadwabviSQ_M-MmX8MXE7j1KJFLcp1PtnORo5UB2J-_uDCO9RKH8EE5drwP0BAoh1i-cCskU3owwUiFByQlTsRRHMV6zyqBcBNDB9ssBqxvonC76pk63esTNK2EpgAt8piVsp5KVnm5wbtB4Pl_wDJrQl1pvjq_8x7q_EgtRod70Yw1kaFpWXvQ6keUoHcH1vH73u8ckVSlsH-SgYfq7h2BzbqKC-RCg8MXQ-TX5s-JJtaCU8N10stIG2LNqcUPeQK2ZlSFs3tNdYTeEhrpbhffoilfjFFCuEFcqyF5TL5St8idKKYdcf2GDT8ckVYzfGjkEpb2doM8hoiCS-5XJpqMMeEpciQCuWE__qSLwR9FfsbV3EF-NStgEHmexv_XJWj_x8MaMGLwfh7qMf-0-o-RhfYqfDBzJC2yzSgWzw1jfUH9GTJMAAY_hoCXmxM5NtvDletOKNgNa4j9-pwSnzrxtg7q8OYjEOUrjVKvv3KQ5Pvxb9sz2zQabPW96k-N7wNkR0YsPgrnngDSkkJ1Igj9BlLli-hhUcTTBG9xxulFo-JalTcvg5Z1Kjt73NfF9drxlm40)


@startuml
skinparam componentStyle rectangle
skinparam component {
    BackgroundColor<<Client>> LightBlue
    BackgroundColor<<Server>> LightGreen
    BackgroundColor<<Data>> LightYellow
    BackgroundColor<<External>> LightPink
}

title Component Diagram: Hotel Reservation System\n(Client-Server Architecture)

actor Guest
actor Staff
actor Administrator

package "Client Side" <<Client>> {
    [WebApp UI] <<Client>> as UI
}

package "Server Side (Backend)" <<Server>> {
    [BookingService] <<Server>> as BS
    [UserService] <<Server>> as US
    [AuthService] <<Server>> as AS
    [AdminService] <<Server>> as Admin
    [ReceptionService] <<Server>> as Reception
    [NotificationService] <<Server>> as NS
}

database "Database\n(PostgreSQL)" <<Data>> as DB

cloud "External Services" <<External>> {
    [Email Server\n(SMTP)] as Email
}

' Provided/Required Interfaces
interface "REST API" as IREST
interface "SQL" as ISQL
interface "SMTP" as ISMTP

Guest --> UI
Staff --> UI
Administrator --> UI

UI --> IREST
BS -up- IREST
US -up- IREST
AS -up- IREST
Admin -up- IREST
Reception -up- IREST

BS --> ISQL
US --> ISQL
AS --> ISQL
Admin --> ISQL
Reception --> ISQL
NS --> ISQL
ISQL -- DB

NS --> ISMTP
ISMTP -- Email

BS ..> US : verifies user
BS ..> AS : checks auth
BS ..> NS : triggers email
Reception ..> BS : manages bookings
Admin ..> BS : gets statistics

note right of UI
    **Frontend:**
    - HTML/CSS/JavaScript
    - React/Vue (optional)
    - User interfaces for all roles
end note

note right of BS
    **Backend Services:**
    - Python + Flask
    - REST API endpoints
    - JWT authentication
    - Business logic
end note

note right of DB
    **Database:**
    - PostgreSQL 15
    - Tables: Account, Guest,
      Booking, Room, Amenity,
      RoomAmenity, Rating,
      Notification
end note

note bottom of IREST
    **Protocol:** HTTPS
    **Format:** JSON
    **Auth:** JWT tokens
end note

@enduml